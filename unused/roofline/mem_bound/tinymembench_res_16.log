tinymembench-pthread v0.4.9 (simple benchmark for memory throughput and latency)
16 threads on 64 CPU

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C fetch unaligned                                    :  55481.0 MB/s (0.3%) @ 16 threads
 C fill unaligned                                     :  23868.4 MB/s (0.3%) @ 16 threads
 ---
 standard memcpy                                      :  22495.7 MB/s        @ 16 threads
 standard memset                                      :  23790.4 MB/s (0.3%) @ 16 threads
 ---
 MOVSB copy                                           :  15036.4 MB/s (0.6%) @ 16 threads
 MOVSD copy                                           :  15117.5 MB/s (0.6%) @ 16 threads
 SSE2 copy                                            :  14225.1 MB/s (0.2%) @ 16 threads
 SSE2 nontemporal copy                                :  21996.4 MB/s        @ 16 threads
 SSE2 copy prefetched (32 bytes step)                 :  14633.9 MB/s (0.5%) @ 16 threads
 SSE2 copy prefetched (64 bytes step)                 :  14610.3 MB/s (0.2%) @ 16 threads
 SSE2 nontemporal copy prefetched (32 bytes step)     :  22711.4 MB/s (0.4%) @ 16 threads
 SSE2 nontemporal copy prefetched (64 bytes step)     :  22673.7 MB/s (0.2%) @ 16 threads
 SSE2 2-pass copy                                     :   8279.8 MB/s (2.4%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   8292.2 MB/s (0.5%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   8186.8 MB/s (2.2%)
 SSE2 2-pass nontemporal copy                         :   2037.5 MB/s (5.8%)
 SSE2 fill                                            :  23865.3 MB/s (0.3%) @ 16 threads
 SSE2 nontemporal fill                                :  38933.3 MB/s        @ 16 threads

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    1.1 ns          /     1.6 ns 
    131072 :    1.6 ns          /     2.0 ns 
    262144 :    1.9 ns          /     2.1 ns 
    524288 :    4.0 ns          /     5.2 ns 
   1048576 :    8.5 ns          /    11.1 ns 
   2097152 :   11.1 ns          /    13.5 ns 
   4194304 :   12.5 ns          /    14.3 ns 
   8388608 :   13.2 ns          /    14.7 ns 
  16777216 :   16.4 ns          /    18.9 ns 
  33554432 :   27.6 ns          /    37.7 ns 
  67108864 :   58.5 ns          /    79.9 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    1.1 ns          /     1.6 ns 
    131072 :    1.6 ns          /     2.0 ns 
    262144 :    1.9 ns          /     2.1 ns 
    524288 :    2.1 ns          /     2.3 ns 
   1048576 :    6.8 ns          /     9.5 ns 
   2097152 :    9.2 ns          /    11.6 ns 
   4194304 :   10.4 ns          /    12.2 ns 
   8388608 :   11.0 ns          /    12.5 ns 
  16777216 :   11.4 ns          /    12.6 ns 
  33554432 :   11.8 ns          /    13.2 ns 
  67108864 :   48.4 ns          /    68.9 ns